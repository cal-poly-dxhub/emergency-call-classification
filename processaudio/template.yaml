AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Globals:
  Function:
    Timeout: 120

Resources:
  SendSessionDataFunction:
    Type: AWS::Serverless::Function 
    Properties:
      Handler: lambda_function.lambda_handler
      Runtime: python3.8
      CodeUri: .
      MemorySize: 128
      Role: !GetAtt SendSessionDataExecutionRole.Arn
      Environment:
        Variables:
          TABLE_NAME: ConnectionIdMappingTable
      Events:
        DynamoDBEvent:
          Type: DynamoDB
          Properties:
            Stream: !GetAtt PredictionsTable.StreamArn
            StartingPosition: LATEST
            BatchSize: 1
            Enabled: True

  SendSessionDataExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: [lambda.amazonaws.com]
            Action: ['sts:AssumeRole']
      Policies:
        - PolicyName: AWSLambdaBasicExecutionRole
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: ['logs:CreateLogGroup', 'logs:CreateLogStream', 'logs:PutLogEvents']
                Resource: 'arn:aws:logs:*:*:*'
        - PolicyName: DynamoDBStreamRead
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'dynamodb:GetRecords'
                  - 'dynamodb:GetShardIterator'
                  - 'dynamodb:DescribeStream'
                  - 'dynamodb:ListStreams'
                Resource: !GetAtt PredictionsTable.StreamArn
        - PolicyName: DynamoDBCrudPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'dynamodb:Query'
                  - 'dynamodb:Scan'
                  - 'dynamodb:GetItem'
                  - 'dynamodb:PutItem'
                  - 'dynamodb:UpdateItem'
                  - 'dynamodb:DeleteItem'
                Resource:
                  - !GetAtt ConnectionIdMappingTable.Arn
                  - !Sub '${ConnectionIdMappingTable.Arn}/index/*'
        - PolicyName: ApiGatewayManageConnections
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: 'execute-api:ManageConnections'
                Resource: 'arn:aws:execute-api:us-west-2:*:cv372khba8/production/*/connections/*'

  ConnectionIdMappingTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: ConnectionIdMappingTable
      AttributeDefinitions:
        - AttributeName: callId
          AttributeType: S
      KeySchema:
        - AttributeName: callId
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  PredictionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: PredictionsTable
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      AttributeDefinitions:
        - AttributeName: callId
          AttributeType: S
      KeySchema:
        - AttributeName: callId
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

Outputs:
  SendSessionDataFunction:
    Description: "Lambda Function ARN"
    Value: !GetAtt SendSessionDataFunction.Arn
  SendSessionDataFunctionIamRole:
    Description: "Implicit IAM Role created for Send Session Data function"
    Value: !GetAtt SendSessionDataExecutionRole.Arn
